require "json"

module JSONParser {
    def parse_json(str) {
        self new tap {
            JSON.parse(str).each {|k, v|
                newKey = self class vget("@revjson")[k]
                if newKey {
                    vset "@" + newKey, v
                }
            }
        }
    }

    def field(name, json) {
        @jsonmap ||= {}
        @jsonmap[name] = json
        @revjson ||= {}
        @revjson[json] = name
        name
    }
}

class JSONObject {
    extend(JSONParser)

    def json() {
        m = {}
        vars each {|k, v|
            newKey = self class vget("@jsonmap")[k[1..-1]]
            if newKey {
                m[newKey] = v
            }
        }
        m.json
    }
}

class Application < JSONObject {
    property (field(:name, "appName"))
    property (field(:size, "applicationSize"))

    def init { @type = self.class.name}
}

app = Application new
app name = "Application 1"
app size = 3


println (app json)

app2 = Application parse_json (app json)
app2 size = 4

println (app2 json)
